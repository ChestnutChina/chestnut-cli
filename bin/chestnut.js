#!/usr/bin/env node
(()=>{var e={65:(e,t,i)=>{const s=i(290),n=i(303),o=i(796),c=i(770),a=i(761),r=i(836),l=i(705),p=i(465);e.exports=(...e)=>async function(){const{selects:e}=await s.prompt({type:"checkbox",name:"selects",message:"Which configurations to add?",choices:[{name:"Code Style",value:"editor"},{name:"Code detection",value:"eslint"},{name:"Code formatter",value:"prettier"},{name:"Commit Message Style",value:"commit"},{name:"Git Hooks",value:"husky"},{name:"Release",value:"release"}]});let t={editor:async function(){await o()},eslint:async function(){await c()},prettier:async function(){await a()},commit:async function(){await l()},husky:async function(){await p()},release:async function(){await r()}};if(e&&0!==e.length)for(let i=0;i<e.length;i++){const s=e[i];await t[s]()}}(...e).catch((e=>{n.error(e),process.exit(1)}))},705:(e,t,i)=>{const s=i(470),n=i(17),o=i(325),c=i(591),a=i(22),r=i(720),l=i(228),p=i(290),g=i(136),m=i(373),f=i(731),u=i(601),w=i(279);e.exports=async function(e){const t=e||process.cwd();await l(t);const{stdout:i}=await o("npm",["root","-g"]),y=n.resolve(i,"commitizen"),d=c(),h=r.commitizen;async function v(){d.start("âœ¨ Commitizen installing..."),await o("npm",["install",`commitizen${h}`,"-g"],{cwd:t}),d.start("Successfully: commitizen install complete.")}if(s.existsSync(y)){const e=await g(y);if(!m(e.version,h)){const{install:t}=await p.prompt({type:"confirm",name:"install",message:`commitizen is ${a.yellowBright(e.version)}, will be installed ${a.cyanBright(h)}. Replace?`});t&&await v()}}else await v();const x=await g(t);await f(x,t,"cz-conventional-changelog",r["cz-conventional-changelog"]);let $=!0,j=".czrc",b=s.existsSync(n.resolve(t,j));if(b||(b=x.config&&x.config.commitizen&&x.config.commitizen.path||!1,b&&(j="package.json")),b){let e="";e=".czrc"===j?`The file ${a.yellowBright(j)} already exists. Replace?`:`The ${a.yellowBright("commitizen")} already exists in package.json.\nCreate ${a.blueBright(".czrc")} file to overwrite rules?`;const{isOverwrite:t}=await p.prompt({type:"confirm",name:"isOverwrite",message:e});$=t}if($){d.start("âœ¨ Commit Message configuring...");const e=".czrc",i=await u(`config/${e}`),s=n.resolve(t,e);await w(i,s),d.succeed("Successfully: Commit Message configured complete.")}console.log(),console.log(`ðŸŽŠ ${a.greenBright("Commit Message Style complete")}: run ${a.blueBright("'git cz'")} to see the effect.`),console.log()}},796:(e,t,i)=>{const s=i(470),n=i(290),o=i(591),c=i(17),a=i(22),r=i(279),l=i(601);e.exports=async function(e){const t=e||process.cwd();let i=!0;const p=".editorconfig";if(s.existsSync(c.resolve(t,p))){const{isOverWrite:e}=await n.prompt({type:"confirm",name:"isOverWrite",message:`The file ${a.yellowBright(p)} already exists. Replace?`});i=e}if(i){const e=o();e.start("âœ¨ Editor configuring...");const i=await l(`config/${p}`),s=c.resolve(t,p);await r(i,s),e.succeed("Successfully: Editor configured complete.")}console.log(),console.log(`ðŸŽŠ ${a.greenBright("Code Style complete.")}`),console.log()}},770:(e,t,i)=>{const s=i(470),n=i(17),o=i(290),c=i(591),a=i(22),r=i(720),l=i(136),p=i(279),g=i(601),m=i(632),f=i(5),u=i(731),w=i(661),y=i(900);e.exports=async function(e){const t=e||process.cwd(),i=await l(t),{type:d}=await o.prompt({type:"list",name:"type",message:"Check javascript or typescript?",choices:[{name:"javascript",value:"js"},{name:"typescript",value:"ts"}]});let h={"eslint-config-prettier":r["eslint-config-prettier"],"eslint-define-config":r["eslint-define-config"],"eslint-plugin-import":r["eslint-plugin-import"],"eslint-plugin-prettier":r["eslint-plugin-prettier"],"eslint-plugin-vue":r["eslint-plugin-vue"]};const v="js"===d?".eslintrc.js":".eslintrc-typescript.js";"js"===d?h=Object.assign(h,{"@babel/eslint-parser":r["@babel/eslint-parser"]}):"ts"===d&&(h=Object.assign(h,{"@typescript-eslint/parser":r["@typescript-eslint/parser"],"@typescript-eslint/eslint-plugin":r["@typescript-eslint/eslint-plugin"]}));const x=r.eslint;await u(i,t,"eslint",x);for(let e in h)await u(i,t,e,h[e]);let $=!0,j=!1,b="";const k=w(i,t,[".eslintrc.js",".eslintrc.cjs",".eslintrc.yaml",".eslintrc.yml",".eslintrc.json"],"eslintConfig",!1);if(j=k.exists,b=k.fileName,j){const e=y(b,".eslintrc.js","eslintConfig",!1);$=(await o.prompt({type:"confirm",name:"eslintrc",message:e})).eslintrc}const C=".eslintignore";let B=!0;if(s.existsSync(n.resolve(t,C))){B=(await o.prompt({type:"confirm",name:"eslintignore",message:`The file ${a.yellowBright(C)} already exists. Replace?`})).eslintrc}const S="lint";let z=!0;if(m(i.scripts,S)){z=(await o.prompt({type:"confirm",name:"script",message:`The command ${a.yellowBright(S)} already exists. Replace?`})).script}else await f(t,S,"eslint . --ext .js"),z=!1;const O=$||B||z,N=c();if(O&&N.start("âœ¨ Eslint configuring..."),$){const e=".eslintrc.js",i=await g(`config/${v}`),s=n.resolve(t,e);await p(i,s)}if(B){const e=await g(`config/${C}`),i=n.resolve(t,C);await p(e,i)}if(z){const e="js"===d?"eslint . --ext .js":"eslint . --ext .ts";await f(t,S,e)}O&&N.succeed("Successfully: Eslint configured complete."),console.log(),console.log(`ðŸŽŠ ${a.greenBright("Code detection complete")}: run ${a.blueBright("'npm run lint'")} to see the effect.`),console.log()}},465:(e,t,i)=>{const s=i(470),n=i(17),o=i(591),c=i(325),a=i(22),r=i(290),l=i(720),p=i(228),g=i(136),m=i(731),f=i(601),u=i(279),w=i(632),y=i(661),d=i(900);e.exports=async function(e){const t=e||process.cwd();await p(t);const i=await g(t),h=l.husky;await m(i,t,"husky",h);const v=o();v.start("âœ¨ Husky initing..."),await c("npx",["husky","install"]),v.succeed("Successfully: husky init complete"),await m(i,t,"@commitlint/cli",l["@commitlint/cli"]),await m(i,t,"@commitlint/config-conventional",l["@commitlint/config-conventional"]);let x=!0;const $="commitlint.config.js";if(s.existsSync(n.resolve(t,$))){const{isOverwrite:e}=await r.prompt({type:"confirm",name:"isOverwrite",message:`The file ${a.yellowBright($)} already exists. Replace?`});x=e}async function j(e){const i=await f(`config/${e}`),s=n.resolve(t,`.husky/${e}`);await u(i,s)}const b=n.resolve(t,".husky/commit-msg");if(s.existsSync(b)){const{commitMsg:e}=await r.prompt({type:"confirm",name:"commitMsg",message:`The file ${a.yellowBright("commit-msg")} already exists. Replace?`});e&&await j("commit-msg")}else await j("commit-msg");if(x){v.start("âœ¨ Commit-msg Configuring...");const e=await f(`config/${$}`),i=n.resolve(t,$);await u(e,i),v.succeed("Successfully: Commit-msg configured complete.")}let{preCommitToCheck:k}=await r.prompt({type:"confirm",name:"preCommitToCheck",message:"Configure code detection before Git commit?"});if(k){w(i.devDependencies,"eslint")||w(i.dependencies,"eslint")||(console.log(`Eslint is not installed. Please perform ${a.yellowBright("Code detection")} and try again command`),process.exit(1)),await m(i,t,"lint-staged",l["lint-staged"]);let e=!0,o="",c=!1;const p=y(i,t,[".lintstagedrc",".lintstagedrc.json",".lintstagedrc.yaml",".lintstagedrc.yml",".lintstagedrc.mjs","lint-staged.config.mjs",".lintstagedrc.cjs","lint-staged.config.cjs","lint-staged.config.js",".lintstagedrc.js"],"lint-staged",!0);if(c=p.exists,o=p.fileName,c){const t=d(o,".lintstagedrc","lint-staged",!0),{isOverwrite:i}=await r.prompt({type:"confirm",name:"isOverwrite",message:t});e=i}if(e){v.start("âœ¨ Lint-staged Configuring...");const e=".lintstagedrc",i=await f(`config/${e}`),s=n.resolve(t,e);await u(i,s),v.succeed("Successfully: Lint-staged configured complete.")}const g=n.resolve(t,".husky/pre-commit");if(s.existsSync(g)){const{preCommit:e}=await r.prompt({type:"confirm",name:"preCommit",message:`The file ${a.yellowBright("pre-commit")} already exists. Replace?`});e&&await j("pre-commit")}else await j("pre-commit")}console.log(),console.log(`ðŸŽŠ ${a.greenBright("Git Hooks complete")}: You can change some test files and push them for testing.`),console.log()}},761:(e,t,i)=>{const s=i(470),n=i(290),o=i(591),c=i(17),a=i(22),r=i(720),l=i(279),p=i(601),g=i(136),m=i(731),f=i(661),u=i(900);e.exports=async function(e){const t=e||process.cwd(),i=await g(t),w=r.prettier;await m(i,t,"prettier",w);let y=!0,d="",h=!1;const v=f(i,t,[".prettierrc",".prettierrc.json",".prettierrc.yml",".prettierrc.yaml",".prettierrc.json5",".prettierrc.js",".prettierrc.cjs","prettier.config.js","prettier.config.cjs",".prettierrc.toml"],"prettier",!0);if(h=v.exists,d=v.fileName,h){const e=u(d,".prettierrc","prettier",!0),{isOverWrite:t}=await n.prompt({type:"confirm",name:"isOverWrite",message:e});y=t}const x=".prettierignore";let $=!0;if(s.existsSync(c.resolve(t,x))){const{isIgnore:e}=await n.prompt({type:"confirm",name:"isIgnore",message:`The file ${a.yellowBright(x)} already exists. Replace?`});$=e}const j=y||$,b=o();if(j&&b.start("âœ¨ Prettier configuring..."),y){const e=".prettierrc",i=await p(`config/${e}`),s=c.resolve(t,e);await l(i,s)}if($){const e=await p(`config/${x}`),i=c.resolve(t,x);await l(e,i)}j&&b.succeed("Successfully: Prettier configured complete."),console.log(),console.log(`ðŸŽŠ ${a.greenBright("Code formatter complete.")}`),console.log()}},836:(e,t,i)=>{const s=i(470),n=i(17),o=i(290),c=i(591),a=i(22),r=i(720),l=i(228),p=i(601),g=i(170),m=i(279),f=i(731),u=i(136),w=i(632),y=i(5),d=i(661),h=i(900);e.exports=async function(e){const t=e||process.cwd();await l(t);const i=await u(t),v=r["release-it"];await f(i,t,"release-it",v),await f(i,t,"@release-it/bumper",r["@release-it/bumper"]),await f(i,t,"conventional-changelog-cli",r["conventional-changelog-cli"]),await f(i,t,"conventional-changelog-chestnut",r["conventional-changelog-chestnut"]);let x=!0,$="",j=!1;const b=d(i,t,[".release-it.json",".release-it.js",".release-it.cjs",".release-it.yaml",".release-it.yml",".release-it.toml"],"release-it",!1);if(j=b.exists,$=b.fileName,j){const e=h($,".release-it.json","release-it",!1),{isOverWrite:t}=await o.prompt({type:"confirm",name:"isOverWrite",message:e});x=t}let k=!0;if(x){k=(await o.prompt({type:"confirm",name:"autoChangelog",message:"CHANGELOG.md is automatically generated?"})).autoChangelog}let C=!0;const B=".chestnutlogrc";if(s.existsSync(n.resolve(t,B))){const{logrc:e}=await o.prompt({type:"confirm",name:"logrc",message:`The file ${a.yellowBright(B)} already exists. Replace?`});C=e}const S="release";let z=!0;if(w(i.scripts,S)){z=(await o.prompt({type:"confirm",name:"script",message:`The command ${a.yellowBright(S)} already exists. Replace?`})).script}else await y(t,S,"release-it"),z=!1;const O="changelog";let N=!0;if(w(i.scripts,O)){N=(await o.prompt({type:"confirm",name:"script",message:`The command ${a.yellowBright(O)} already exists. Replace?`})).script}else await y(t,O,"conventional-changelog -p chestnut -i CHANGELOG.md -s -r 0"),N=!1;const T=x||C||z||N,R=c();if(T&&R.start("âœ¨ Release configuring..."),x){const e={hasChangelog:k},i=".release-it.json",s=await p(`config/${i}`),o=n.resolve(t,i);await g(s,o,e)}if(C){const e=await p("config/.chestnutlogrc"),i=n.resolve(t,B);await m(e,i)}z&&await y(t,S,"release-it"),N&&await y(t,O,"conventional-changelog -p chestnut -i CHANGELOG.md -s -r 0"),T&&R.succeed("Successfully: Release configured complete."),console.log(),console.log(`ðŸŽŠ ${a.greenBright("Release complete")}: run ${a.blueBright("'npm run release'")} to see the effect.`),console.log()}},5:(e,t,i)=>{const s=i(470),n=i(17),o=i(136);e.exports=async function(e,t,i){const c=await o(e);c.scripts[t]=i;const a=n.join(e,"package.json");await s.writeFile(a,JSON.stringify(c,null,"\t"))}},228:(e,t,i)=>{const s=i(470),n=i(290),o=i(591),c=i(17),a=i(325);e.exports=async function(e){const t=e||process.cwd(),i=c.resolve(t,".git");if(!s.existsSync(i)){const{init:e}=await n.prompt({type:"confirm",name:"init",message:"Not a git repository: .git, We will do git initialization?"});e||(console.log(),console.log("Please initialize the project git and try again command"),console.log(),process.exit(1));const i=o();i.start("âœ¨ Git initializating..."),await a("git",["init"],{cwd:t}),i.succeed("Successfully: git init")}}},731:(e,t,i)=>{const s=i(591),n=i(325),o=i(290),c=i(22),a=i(632),r=i(373);async function l(e,t,i){const o=s();o.start(`âœ¨ ${t} installing...`),await n("npm",["install",`${t}${i}`,"--save-dev"],{cwd:e}),o.succeed(`Successfully: ${t} install complete.`)}e.exports=async function(e,t,i,s){const n=a(e.devDependencies,i)||a(e.dependencies,i);if(n){if(!r(n.version,s)){const{isInstall:e}=await o.prompt({type:"confirm",name:"isInstall",message:`${i} is ${c.yellowBright(n.version)}, will be installed ${c.cyanBright(s)}. Replace?`});e&&await l(t,i,s)}}else await l(t,i,s)}},661:(e,t,i)=>{const s=i(470),n=i(17),o=function(e,t,i){for(let o=0;o<i.length;o++){const c=i[o];if(t.exists=s.existsSync(n.resolve(e,c)),t.exists){t.fileName=c;break}}return t},c=function(e,t,i){return(e[i]||"")&&(t.exists=!0,t.fileName="package.json"),t};e.exports=function(e,t,i=[],s,n=!1){const a={exists:!1,fileName:""};return n?(c(e,a,s),a.exists||o(t,a,i)):(o(t,a,i),a.exists||c(e,a,s)),a}},373:(e,t,i)=>{const s=i(912);e.exports=function(e,t){return s.satisfies(e.split("^").pop(),t.split("@").pop())}},720:e=>{e.exports={"eslint-config-prettier":"@8.4.0","eslint-define-config":"@1.2.5","eslint-plugin-import":"@2.25.4","eslint-plugin-prettier":"@4.0.0","eslint-plugin-vue":"@8.4.1","@babel/eslint-parser":"@7.17.0","@typescript-eslint/parser":"@5.14.0","@typescript-eslint/eslint-plugin":"@5.14.0",eslint:"@8.10.0",prettier:"@2.5.1","release-it":"@14.12.4","@release-it/bumper":"@3.0.1","conventional-changelog-cli":"@2.2.2","conventional-changelog-chestnut":"@1.1.2",commitizen:"@4.2.4","cz-conventional-changelog":"@3.3.0",husky:"@7.0.4","@commitlint/cli":"@16.2.1","@commitlint/config-conventional":"@16.2.1","lint-staged":"@12.3.4"}},279:(e,t,i)=>{const s=i(470);e.exports=async function(e,t){await new Promise(((i,n)=>{s.copy(e,t).then((()=>i(!0))).catch((e=>n(e)))}))}},632:e=>{e.exports=function(e,t){if(e)return e[t]?{name:t,version:e[t]}:void 0}},601:(e,t,i)=>{const s=i(325),n=i(17);e.exports=async function(e,t="chestnut-cli"){const{stdout:i}=await s("npm",["root","-g"]);return n.resolve(i,`./${t}/template/${e}`)}},900:(e,t,i)=>{const s=i(22);e.exports=function(e,t,i,n=!1){let o="";return o=e===t?`The file ${s.yellowBright(e)} already exists. Replace?`:"package.json"===e?n?`The ${s.yellowBright(i)} already exists in package.json.\nDelete the ${s.yellowBright(i)} by yourself.\nCreate ${s.blueBright(t)} file to overwrite rules?`:`The ${s.yellowBright(i)} already exists in package.json.\nCreate ${s.blueBright(t)} file to overwrite rules?`:`The ${s.yellowBright(e)} already exists.\nCreate ${s.blueBright(t)} file to overwrite rules?`,o}},136:(e,t,i)=>{const s=i(470),n=i(17);e.exports=async function(e){return await async function(e){const t=n.join(e,"package.json");let i;try{i=await s.readFile(t,"utf-8")}catch(e){throw console.log(e),new Error(`The package.json file at '${t}' does not exist`)}try{i=JSON.parse(i)}catch(e){throw console.log(e),new Error("The package.json is malformed")}return i}(e)}},303:(e,t,i)=>{const s=i(22);e.exports={info(e){console.log(s.hex("#00afef")(e))},success(e){console.log(s.hex("#00c48f")(e))},warning(e){console.log(s.hex("#ff9800")(e))},error(e){console.log(s.hex("#f44336")(e))}}},170:(e,t,i)=>{const s=i(470),n=i(97);e.exports=async function(e,t,i={}){await new Promise(((o,c)=>{s.readFile(e).then((e=>{const c=e.toString(),a=n.compile(c)(i);s.writeFileSync(t,a),o(!0)})).catch((e=>c(e)))}))}},22:e=>{"use strict";e.exports=require("chalk")},304:e=>{"use strict";e.exports=require("commander")},325:e=>{"use strict";e.exports=require("execa")},470:e=>{"use strict";e.exports=require("fs-extra")},97:e=>{"use strict";e.exports=require("handlebars")},290:e=>{"use strict";e.exports=require("inquirer")},591:e=>{"use strict";e.exports=require("ora")},912:e=>{"use strict";e.exports=require("semver")},17:e=>{"use strict";e.exports=require("path")},147:e=>{"use strict";e.exports=JSON.parse('{"name":"webpack-chestnut-cli","version":"1.0.7","description":"","bin":{"my-cli":"./bin/chestnut.js"},"scripts":{"before:npm:publish":"node ./optimize-package.js","test":"echo \\"Error: no test specified\\" && exit 1","lint":"eslint . --ext .js","release":"release-it","dev":"cross-env NODE_ENV=development webpack --watch --config config/webpack.config.dev.js --progress","build":"cross-env NODE_ENV=production webpack --config config/webpack.config.prod.js","changelog":"conventional-changelog -p chestnut -i CHANGELOG.md -s -r 0"},"repository":{"type":"git","url":"https://gitee.com/chestnut-china/webpack-chestnut-cli.git"},"keywords":[],"author":"","license":"ISC","devDependencies":{"@babel/eslint-parser":"^7.17.0","@commitlint/cli":"^16.2.1","@commitlint/config-conventional":"^16.2.1","@release-it/bumper":"^3.0.1","clean-webpack-plugin":"^4.0.0","conventional-changelog-chestnut":"^1.1.2","conventional-changelog-cli":"^2.2.2","cross-env":"^7.0.3","cz-conventional-changelog":"^3.3.0","eslint":"^8.10.0","eslint-config-prettier":"^8.4.0","eslint-define-config":"^1.2.5","eslint-plugin-import":"^2.25.4","eslint-plugin-prettier":"^4.0.0","eslint-plugin-vue":"^8.4.1","husky":"^7.0.4","lint-staged":"^12.3.4","prettier":"^2.5.1","release-it":"^14.12.4","terser-webpack-plugin":"^5.3.1","uglify-js":"^3.15.1","webpack":"^5.69.1","webpack-cli":"^4.9.2","webpack-merge":"^5.8.0","webpack-node-externals":"^3.0.0"},"engines":{"node":"^12.22.0 || ^14.17.0 || >=16.0.0"},"dependencies":{"chalk":"^4.1.2","commander":"^9.0.0","execa":"^1.0.0","fs-extra":"^10.0.0","handlebars":"^4.7.7","inquirer":"^8.2.0","lodash":"^4.17.21","ora":"^5.4.1","semver":"^7.3.5","validate-npm-package-name":"^3.0.0"}}')}},t={};function i(s){var n=t[s];if(void 0!==n)return n.exports;var o=t[s]={exports:{}};return e[s](o,o.exports,i),o.exports}(()=>{const e=i(912),t=i(303),s=i(147),n=s.engines.node,o="chestnut-cli";var c,a;c=n,a=o,e.satisfies(process.version,c,{includePrerelease:!0})||(t.error(`You are using Node ${process.version}, but this version of ${a} requires Node ${c}.\nPlease upgrade your Node version.`),process.exit(1));const{Command:r}=i(304),l=new r;l.name(o).version(`${o} ${s.version}`,"-v -V -version").usage("<command> [options]"),l.command("config").description("manage a project").action((()=>{i(65)()})),l.parse(process.argv)})()})();