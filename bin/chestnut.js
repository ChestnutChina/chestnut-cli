#!/usr/bin/env node
(()=>{var e={65:(e,t,i)=>{const s=i(290),n=i(303),o=i(796),c=i(770),a=i(761),r=i(836),l=i(705),p=i(465);e.exports=(...e)=>async function(){const{selects:e}=await s.prompt({type:"checkbox",name:"selects",message:"Which configurations to add?",choices:[{name:"Code Style",value:"editor"},{name:"Code detection",value:"eslint"},{name:"Code formatter",value:"prettier"},{name:"Release",value:"release"},{name:"Commit Message Style",value:"commit"},{name:"Git Hooks",value:"husky"}]});let t={editor:async function(){await o()},eslint:async function(){await c()},prettier:async function(){await a()},release:async function(){await r()},commit:async function(){await l()},husky:async function(){await p()}};if(e&&0!==e.length)for(let i=0;i<e.length;i++){const s=e[i];await t[s]()}}(...e).catch((e=>{n.error(e),process.exit(1)}))},705:(e,t,i)=>{const s=i(470),n=i(17),o=i(325),c=i(591),a=i(22),r=i(720),l=i(228),p=i(290),g=i(136),m=i(373),u=i(731),f=i(601),w=i(279);e.exports=async function(e){const t=e||process.cwd();await l(t);const{stdout:i}=await o("npm",["config","get","prefix"]),y=n.resolve(i,"./node_modules/commitizen"),d=await g(y),h=c(),v=r.commitizen;async function x(){h.start("âœ¨ Commitizen installing..."),await o("npm",["install",`commitizen${v}`,"-g"],{cwd:t}),h.start("Successfully: commitizen install complete.")}if(s.existsSync(y)){if(!m(d.version,v)){const{install:e}=await p.prompt({type:"confirm",name:"install",message:`commitizen is ${a.yellowBright(d.version)}, will be installed ${a.cyanBright(v)}. Replace?`});e&&await x()}}else await x();const $=await g(t);await u($,t,"cz-conventional-changelog",r["cz-conventional-changelog"]);let k=!0;const b=".czrc";if(s.existsSync(n.resolve(t,b))){const{isOverwrite:e}=await p.prompt({type:"confirm",name:"isOverwrite",message:`The file ${a.yellowBright(b)} already exists. Replace?`});k=e}if(k){h.start("âœ¨ Commit Message configuring...");const e=await f("config/.czrc"),i=n.resolve(t,b);await w(e,i),h.succeed("Successfully: Commit Message configured complete.")}console.log(),console.log(`ðŸŽŠ ${a.greenBright("Commit Message Style complete")}: run ${a.blueBright("'git cz'")} to see the effect.`),console.log()}},796:(e,t,i)=>{const s=i(470),n=i(290),o=i(591),c=i(17),a=i(22),r=i(279),l=i(601);e.exports=async function(e){const t=e||process.cwd();let i=!0;const p=".editorconfig";if(s.existsSync(c.resolve(t,p))){const{isOverWrite:e}=await n.prompt({type:"confirm",name:"isOverWrite",message:`The file ${a.yellowBright(p)} already exists. Replace?`});i=e}if(i){const e=o();e.start("âœ¨ Editor configuring...");const i=await l(`config/${p}`),s=c.resolve(t,p);await r(i,s),e.succeed("Successfully: Editor configured complete.")}console.log(),console.log(`ðŸŽŠ ${a.greenBright("Code Style complete.")}`),console.log()}},770:(e,t,i)=>{const s=i(470),n=i(17),o=i(290),c=i(591),a=i(22),r=i(720),l=i(136),p=i(279),g=i(601),m=i(632),u=i(5),f=i(731);e.exports=async function(e){const t=e||process.cwd(),i=await l(t),{type:w}=await o.prompt({type:"list",name:"type",message:"Check javascript or typescript?",choices:[{name:"javascript",value:"js"},{name:"typescript",value:"ts"}]});let y={"eslint-config-prettier":r["eslint-config-prettier"],"eslint-define-config":r["eslint-define-config"],"eslint-plugin-import":r["eslint-plugin-import"],"eslint-plugin-prettier":r["eslint-plugin-prettier"],"eslint-plugin-vue":r["eslint-plugin-vue"]};const d="js"===w?".eslintrc.js":".eslintrc-typescript.js";"js"===w?y=Object.assign(y,{"@babel/eslint-parser":r["@babel/eslint-parser"]}):"ts"===w&&(y=Object.assign(y,{"@typescript-eslint/parser":r["@typescript-eslint/parser"],"@typescript-eslint/eslint-plugin":r["@typescript-eslint/eslint-plugin"]}));const h=r.eslint;await f(i,t,"eslint",h);for(let e in y)await f(i,t,e,y[e]);let v=!0;if(s.existsSync(n.resolve(t,".eslintrc.js"))||s.existsSync(n.resolve(t,".eslintrc.ts"))){v=(await o.prompt({type:"confirm",name:"eslintrc",message:`The file ${a.yellowBright(".eslintrc.(js|ts)")} already exists. Replace?`})).eslintrc}const x=".eslintignore";let $=!0;if(s.existsSync(n.resolve(t,x))){$=(await o.prompt({type:"confirm",name:"eslintignore",message:`The file ${a.yellowBright(x)} already exists. Replace?`})).eslintrc}const k="lint";let b=!0;if(m(i.scripts,k)){b=(await o.prompt({type:"confirm",name:"script",message:`The command ${a.yellowBright(k)} already exists. Replace?`})).script}else await u(t,k,"eslint . --ext .js"),b=!1;const S=v||$||b,C=c();if(S&&C.start("âœ¨ Eslint configuring..."),v){const e="js"===w?".eslintrc.js":".eslintrc.ts",i=await g(`config/${d}`),s=n.resolve(t,e);await p(i,s)}if($){const e=await g(`config/${x}`),i=n.resolve(t,x);await p(e,i)}if(b){const e="js"===w?"eslint . --ext .js":"eslint . --ext .ts";await u(t,k,e)}S&&C.succeed("Successfully: Eslint configured complete."),console.log(),console.log(`ðŸŽŠ ${a.greenBright("Code detection complete")}: run ${a.blueBright("'npm run lint'")} to see the effect.`),console.log()}},465:(e,t,i)=>{const s=i(470),n=i(17),o=i(591),c=i(325),a=i(22),r=i(290),l=i(720),p=i(228),g=i(136),m=i(731),u=i(601),f=i(279),w=i(632);e.exports=async function(e){const t=e||process.cwd();await p(t);const i=await g(t),y=l.husky;await m(i,t,"husky",y);const d=o();d.start("âœ¨ Husky initing..."),await c("npx",["husky","install"]),d.succeed("Successfully: husky init complete"),await m(i,t,"@commitlint/cli",l["@commitlint/cli"]),await m(i,t,"@commitlint/config-conventional",l["@commitlint/config-conventional"]);let h=!0;const v="commitlint.config.js";if(s.existsSync(n.resolve(t,v))){const{isOverwrite:e}=await r.prompt({type:"confirm",name:"isOverwrite",message:`The file ${a.yellowBright(v)} already exists. Replace?`});h=e}const x=n.resolve(t,".husky/commit-msg");if(s.existsSync(x)){const{commitMsg:e}=await r.prompt({type:"confirm",name:"commitMsg",message:`The file ${a.yellowBright("commit-msg")} already exists. Replace?`});e&&(await s.remove(x),await c("npx",["husky","add",".husky/commit-msg","npx --no-install commitlint --edit $1"]))}else await c("npx",["husky","add",".husky/commit-msg","npx --no-install commitlint --edit $1"]);if(h){d.start("âœ¨ Commit-msg Configuring...");const e=await u(`config/${v}`),i=n.resolve(t,v);await f(e,i),d.succeed("Successfully: Commit-msg configured complete.")}let{preCommitToCheck:$}=await r.prompt({type:"confirm",name:"preCommitToCheck",message:"Configure code detection before Git commit?"});if($){w(i.devDependencies,"eslint")||w(i.dependencies,"eslint")||(console.log(`Eslint is not installed. Please perform ${a.yellowBright("Code detection")} and try again command`),process.exit(1)),await m(i,t,"lint-staged",l["lint-staged"]);let e=!0;const o=".lintstagedrc";if(s.existsSync(n.resolve(t,o))){const{isOverwrite:t}=await r.prompt({type:"confirm",name:"isOverwrite",message:`The file ${a.yellowBright(o)} already exists. Replace?`});e=t}if(e){d.start("âœ¨ Lint-staged Configuring...");const e=await u(`config/${o}`),i=n.resolve(t,o);await f(e,i),d.succeed("Successfully: Lint-staged configured complete.")}const p=n.resolve(t,".husky/pre-commit");if(s.existsSync(p)){const{preCommit:e}=await r.prompt({type:"confirm",name:"preCommit",message:`The file ${a.yellowBright("pre-commit")} already exists. Replace?`});e&&(await s.remove(p),await c("npx",["husky","add",".husky/pre-commit","npx lint-staged"]))}else await c("npx",["husky","add",".husky/pre-commit","npx lint-staged"])}console.log(),console.log(`ðŸŽŠ ${a.greenBright("Git Hooks complete")}: You can change some test files and push them for testing.`),console.log()}},761:(e,t,i)=>{const s=i(470),n=i(290),o=i(591),c=i(17),a=i(22),r=i(720),l=i(279),p=i(601),g=i(136),m=i(731);e.exports=async function(e){const t=e||process.cwd(),i=await g(t),u=r.prettier;await m(i,t,"prettier",u);let f=!0;const w=".prettierrc";if(s.existsSync(c.resolve(t,w))){const{isOverWrite:e}=await n.prompt({type:"confirm",name:"isOverWrite",message:`The file ${a.yellowBright(w)} already exists. Replace?`});f=e}const y=".prettierignore";let d=!0;if(s.existsSync(c.resolve(t,y))){const{isIgnore:e}=await n.prompt({type:"confirm",name:"isIgnore",message:`The file ${a.yellowBright(y)} already exists. Replace?`});d=e}const h=f||d,v=o();if(h&&v.start("âœ¨ Prettier configuring..."),f){const e=await p(`config/${w}`),i=c.resolve(t,w);await l(e,i)}if(d){const e=await p(`config/${y}`),i=c.resolve(t,y);await l(e,i)}h&&v.succeed("Successfully: Prettier configured complete."),console.log(),console.log(`ðŸŽŠ ${a.greenBright("Code formatter complete.")}`),console.log()}},836:(e,t,i)=>{const s=i(470),n=i(17),o=i(290),c=i(591),a=i(22),r=i(720),l=i(228),p=i(601),g=i(170),m=i(279),u=i(731),f=i(136),w=i(632),y=i(5);e.exports=async function(e){const t=e||process.cwd();await l(t);const i=await f(t),d=r["release-it"];await u(i,t,"release-it",d),await u(i,t,"@release-it/bumper",r["@release-it/bumper"]),await u(i,t,"conventional-changelog-cli",r["conventional-changelog-cli"]),await u(i,t,"conventional-changelog-chestnut",r["conventional-changelog-chestnut"]);let h=!0;const v=".release-it.json";if(s.existsSync(n.resolve(t,v))){const{isOverWrite:e}=await o.prompt({type:"confirm",name:"isOverWrite",message:`The file ${a.yellowBright(v)} already exists. Replace?`});h=e}let x=!0;if(h){x=(await o.prompt({type:"confirm",name:"autoChangelog",message:"CHANGELOG.md is automatically generated?"})).autoChangelog}let $=!0;const k=".chestnutlogrc";if(s.existsSync(n.resolve(t,k))){const{logrc:e}=await o.prompt({type:"confirm",name:"logrc",message:`The file ${a.yellowBright(k)} already exists. Replace?`});$=e}const b="release";let S=!0;if(w(i.scripts,b)){S=(await o.prompt({type:"confirm",name:"script",message:`The command ${a.yellowBright(b)} already exists. Replace?`})).script}else await y(t,b,"release-it"),S=!1;const C="changelog";let j=!0;if(w(i.scripts,C)){j=(await o.prompt({type:"confirm",name:"script",message:`The command ${a.yellowBright(C)} already exists. Replace?`})).script}else await y(t,C,"conventional-changelog -p chestnut -i CHANGELOG.md -s -r 0"),j=!1;const B=h||$||S||j,O=c();if(B&&O.start("âœ¨ Release configuring..."),h){const e={hasChangelog:x},i=await p(`config/${v}`),s=n.resolve(t,v);await g(i,s,e)}if($){const e=await p("config/.chestnutlogrc"),i=n.resolve(t,k);await m(e,i)}S&&await y(t,b,"release-it"),j&&await y(t,C,"conventional-changelog -p chestnut -i CHANGELOG.md -s -r 0"),B&&O.succeed("Successfully: Release configured complete."),console.log(),console.log(`ðŸŽŠ ${a.greenBright("Release complete")}: run ${a.blueBright("'npm run release'")} to see the effect.`),console.log()}},5:(e,t,i)=>{const s=i(470),n=i(17),o=i(136);e.exports=async function(e,t,i){const c=await o(e);c.scripts[t]=i;const a=n.join(e,"package.json");await s.writeFile(a,JSON.stringify(c,null,"\t"))}},228:(e,t,i)=>{const s=i(470),n=i(290),o=i(591),c=i(17),a=i(325);e.exports=async function(e){const t=e||process.cwd(),i=c.resolve(t,".git");if(!s.existsSync(i)){const{init:e}=await n.prompt({type:"confirm",name:"init",message:"Not a git repository: .git, We will do git initialization?"});e||(console.log(),console.log("Please initialize the project git and try again command"),console.log(),process.exit(1));const i=o();i.start("âœ¨ Git initializating..."),await a("git",["init"],{cwd:t}),i.succeed("Successfully: git init")}}},731:(e,t,i)=>{const s=i(591),n=i(325),o=i(290),c=i(22),a=i(632),r=i(373);async function l(e,t,i){const o=s();o.start(`âœ¨ ${t} installing...`),await n("npm",["install",`${t}${i}`,"--save-dev"],{cwd:e}),o.succeed(`Successfully: ${t} install complete.`)}e.exports=async function(e,t,i,s){const n=a(e.devDependencies,i)||a(e.dependencies,i);if(n){if(!r(n.version,s)){const{isInstall:e}=await o.prompt({type:"confirm",name:"isInstall",message:`${i} is ${c.yellowBright(n.version)}, will be installed ${c.cyanBright(s)}. Replace?`});e&&await l(t,i,s)}}else await l(t,i,s)}},373:(e,t,i)=>{const s=i(912);e.exports=function(e,t){return s.satisfies(e.split("^").pop(),t.split("@").pop())}},720:e=>{e.exports={"eslint-config-prettier":"@8.4.0","eslint-define-config":"@1.2.5","eslint-plugin-import":"@2.25.4","eslint-plugin-prettier":"@4.0.0","eslint-plugin-vue":"@8.4.1","@babel/eslint-parser":"@7.17.0","@typescript-eslint/parser":"@5.12.0","@typescript-eslint/eslint-plugin":"@5.12.0",eslint:"@8.9.0",prettier:"@2.5.1","release-it":"@14.12.4","@release-it/bumper":"@3.0.1","conventional-changelog-cli":"@2.2.2","conventional-changelog-chestnut":"@1.1.2",commitizen:"@4.2.4","cz-conventional-changelog":"@3.3.0",husky:"@7.0.4","@commitlint/cli":"@16.2.1","@commitlint/config-conventional":"@16.2.1","lint-staged":"@12.3.4"}},279:(e,t,i)=>{const s=i(470);e.exports=async function(e,t){await new Promise(((i,n)=>{s.copy(e,t).then((()=>i(!0))).catch((e=>n(e)))}))}},632:e=>{e.exports=function(e,t){if(e)return e[t]?{name:t,version:e[t]}:void 0}},601:(e,t,i)=>{const s=i(325),n=i(17);e.exports=async function(e,t="chestnut-cli"){const{stdout:i}=await s("npm",["config","get","prefix"]);return n.resolve(i,`./node_modules/${t}/template/${e}`)}},136:(e,t,i)=>{const s=i(470),n=i(17);e.exports=async function(e){return await async function(e){const t=n.join(e,"package.json");let i;try{i=await s.readFile(t,"utf-8")}catch(e){throw new Error(`The package.json file at '${t}' does not exist`)}try{i=JSON.parse(i)}catch(e){throw new Error("The package.json is malformed")}return i}(e)}},303:(e,t,i)=>{const s=i(22);e.exports={info(e){console.log(s.hex("#00afef")(e))},success(e){console.log(s.hex("#00c48f")(e))},warning(e){console.log(s.hex("#ff9800")(e))},error(e){console.log(s.hex("#f44336")(e))}}},170:(e,t,i)=>{const s=i(470),n=i(97);e.exports=async function(e,t,i={}){await new Promise(((o,c)=>{s.readFile(e).then((e=>{const c=e.toString(),a=n.compile(c)(i);s.writeFileSync(t,a),o(!0)})).catch((e=>c(e)))}))}},22:e=>{"use strict";e.exports=require("chalk")},304:e=>{"use strict";e.exports=require("commander")},325:e=>{"use strict";e.exports=require("execa")},470:e=>{"use strict";e.exports=require("fs-extra")},97:e=>{"use strict";e.exports=require("handlebars")},290:e=>{"use strict";e.exports=require("inquirer")},591:e=>{"use strict";e.exports=require("ora")},912:e=>{"use strict";e.exports=require("semver")},17:e=>{"use strict";e.exports=require("path")},147:e=>{"use strict";e.exports=JSON.parse('{"name":"webpack-chestnut-cli","version":"1.0.0","description":"","bin":{"my-cli":"./bin/chestnut.js"},"scripts":{"before:npm:publish":"node ./optimize-package.js","test":"echo \\"Error: no test specified\\" && exit 1","lint":"eslint . --ext .js","release":"release-it","dev":"cross-env NODE_ENV=development webpack --watch --config config/webpack.config.dev.js --progress","build":"cross-env NODE_ENV=production webpack --config config/webpack.config.prod.js","changelog":"conventional-changelog -p chestnut -i CHANGELOG.md -s -r 0"},"repository":{"type":"git","url":"https://gitee.com/chestnut-china/webpack-chestnut-cli.git"},"keywords":[],"author":"","license":"ISC","devDependencies":{"@babel/eslint-parser":"^7.17.0","@commitlint/cli":"^16.2.1","@commitlint/config-conventional":"^16.2.1","@release-it/bumper":"^3.0.1","clean-webpack-plugin":"^4.0.0","conventional-changelog-chestnut":"^1.1.2","conventional-changelog-cli":"^2.2.2","cross-env":"^7.0.3","cz-conventional-changelog":"^3.3.0","eslint":"^8.9.0","eslint-config-prettier":"^8.4.0","eslint-define-config":"^1.2.5","eslint-plugin-import":"^2.25.4","eslint-plugin-prettier":"^4.0.0","eslint-plugin-vue":"^8.4.1","husky":"^7.0.4","lint-staged":"^12.3.4","prettier":"^2.5.1","release-it":"^14.12.4","terser-webpack-plugin":"^5.3.1","uglify-js":"^3.15.1","webpack":"^5.69.1","webpack-cli":"^4.9.2","webpack-merge":"^5.8.0","webpack-node-externals":"^3.0.0"},"engines":{"node":"^12.22.0 || ^14.17.0 || >=16.0.0"},"dependencies":{"chalk":"^4.1.2","commander":"^9.0.0","execa":"^1.0.0","fs-extra":"^10.0.0","handlebars":"^4.7.7","inquirer":"^8.2.0","lodash":"^4.17.21","ora":"^5.4.1","semver":"^7.3.5","validate-npm-package-name":"^3.0.0"}}')}},t={};function i(s){var n=t[s];if(void 0!==n)return n.exports;var o=t[s]={exports:{}};return e[s](o,o.exports,i),o.exports}(()=>{const e=i(912),t=i(303),s=i(147),n=s.engines.node,o="chestnut-cli";var c,a;c=n,a=o,e.satisfies(process.version,c,{includePrerelease:!0})||(t.error(`You are using Node ${process.version}, but this version of ${a} requires Node ${c}.\nPlease upgrade your Node version.`),process.exit(1));const{Command:r}=i(304),l=new r;l.name(o).version(`${o} ${s.version}`,"-v -V --version").usage("<command> [options]"),l.command("config").description("manage a project").action((()=>{i(65)()})),l.parse(process.argv)})()})();